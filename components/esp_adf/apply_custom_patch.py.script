from os.path import join, isfile, isdir
import os

Import("env")

# Dynamically determine the framework directory and project-specific build directory
FRAMEWORK_DIR = env.PioPlatform().get_package_dir("framework-espidf")
PROJECT_DIR = env.get("PROJECT_DIR")

# Corrected path to the main build directory
BUILD_DIR = join(PROJECT_DIR, "build")  # Adjust this if needed to match your actual directory

if not isdir(BUILD_DIR):
    print(f"Error: Build directory does not exist: {BUILD_DIR}")
    env.Exit(1)

# Dynamically find the subdirectory (e.g., homeassist03)
subdirs = [d for d in os.listdir(BUILD_DIR) if isdir(join(BUILD_DIR, d))]
if not subdirs:
    print("Error: No build subdirectories found!")
    env.Exit(1)
elif len(subdirs) > 1:
    print(f"Warning: Multiple build subdirectories found: {subdirs}. Using the first one.")

BUILD_SUBDIR = subdirs[0]  # Use the first subdirectory if multiple exist
FINAL_BUILD_DIR = join(BUILD_DIR, BUILD_SUBDIR)

print(f"Framework directory: {FRAMEWORK_DIR}")
print(f"Build directory: {FINAL_BUILD_DIR}")

# Define the patch file
PATCH_FILE = join(PROJECT_DIR, "esp_adf_patches", "esp_adf_patch.diff")

# Apply the patch
if not isfile(PATCH_FILE):
    print(f"Error: Patch file not found at {PATCH_FILE}")
    env.Exit(1)

print(f"Applying patch: {PATCH_FILE}")
result = env.Execute(f"patch -p1 -d {FINAL_BUILD_DIR} -i {PATCH_FILE}")

if result != 0:
    print("Error: Failed to apply the patch.")
    env.Exit(1)

print("Patch applied successfully.")
