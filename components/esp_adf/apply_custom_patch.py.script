from os.path import join, isfile
import os

Import("env")

FRAMEWORK_DIR = env.PioPlatform().get_package_dir("framework-espidf")
patchflag_path = join(FRAMEWORK_DIR, ".adf-patching-done")

PROJECT_DIR = env.get('PROJECT_DIR')

# Existing patch file
PATCH_FILE = join(PROJECT_DIR, "esp_adf_patches", "idf_v4.4_freertos.patch")

# Custom patch file
CUSTOM_PATCH_FILE = join(PROJECT_DIR, "esp_adf_patches", "esp_adf_patch.diff")

# patch files only if we didn't do it before
if not isfile(patchflag_path):
    print("Applying patch:", PATCH_FILE)
    assert isfile(PATCH_FILE)

    env.Execute("patch -p1 -d %s -i %s" % (FRAMEWORK_DIR, PATCH_FILE))
    
    # Apply custom patch
    if isfile(CUSTOM_PATCH_FILE):
        print("Applying custom patch:", CUSTOM_PATCH_FILE)
        env.Execute("patch -p1 -d %s -i %s" % (FRAMEWORK_DIR, CUSTOM_PATCH_FILE))
    else:
        print("Custom patch file not found:", CUSTOM_PATCH_FILE)
    
    def _touch(path):
        with open(path, "w") as fp:
            fp.write("")

    env.Execute(lambda *args, **kwargs: _touch(patchflag_path))
else:
    print("Patches already applied.")
