diff --git a/components/audio_board/include/board_pins_config.h b/components/audio_board/include/board_pins_config.h
index 62893921..f536ee46 100644
--- a/components/audio_board/include/board_pins_config.h
+++ b/components/audio_board/include/board_pins_config.h
@@ -29,6 +29,7 @@
 #include "driver/spi_common.h"
 #include "driver/spi_master.h"
 #include "driver/spi_slave.h"
+#include "driver/i2s_std.h"
 
 #ifdef __cplusplus
 extern "C" {
@@ -61,13 +62,13 @@ esp_err_t get_i2c_pins(i2c_port_t port, i2c_config_t *i2c_config);
  * @brief                  Get i2s pins configuration
  *
  * @param      port        i2s port number to get configuration
- * @param      i2s_config  i2s configuration parameters
+ * @param      gpio_cfg    i2s configuration parameters
  *
  * @return
  *     - ESP_OK
  *     - ESP_FAIL
  */
-esp_err_t get_i2s_pins(int port, board_i2s_pin_t *i2s_config);
+esp_err_t get_i2s_pins(int port, i2s_std_gpio_config_t *gpio_cfg);
 
 /**
  * @brief                  Get spi pins configuration
diff --git a/components/audio_hal/driver/tas5805m/tas5805m.c b/components/audio_hal/driver/tas5805m/tas5805m.c
index fef4fe3c..7c448d8d 100644
--- a/components/audio_hal/driver/tas5805m/tas5805m.c
+++ b/components/audio_hal/driver/tas5805m/tas5805m.c
@@ -94,7 +94,7 @@ static esp_err_t tas5805m_transmit_registers(const tas5805m_cfg_reg_t *conf_buf,
                 // Used in legacy applications.  Ignored here.
                 break;
             case CFG_META_DELAY:
-                vTaskDelay(conf_buf[i].value / portTICK_RATE_MS);
+                vTaskDelay(conf_buf[i].value / portTICK_PERIOD_MS);
                 break;
             case CFG_META_BURST:
                 ret = i2c_bus_write_bytes(i2c_handler, TAS5805M_ADDR, (unsigned char *)(&conf_buf[i + 1].offset), 1, (unsigned char *)(&conf_buf[i + 1].value), conf_buf[i].value);
@@ -129,9 +129,9 @@ esp_err_t tas5805m_init(audio_hal_codec_config_t *codec_cfg)
     io_conf.intr_type = GPIO_INTR_DISABLE;
     gpio_config(&io_conf);
     gpio_set_level(TAS5805M_RST_GPIO, 0);
-    vTaskDelay(20 / portTICK_RATE_MS);
+    vTaskDelay(20 / portTICK_PERIOD_MS);
     gpio_set_level(TAS5805M_RST_GPIO, 1);
-    vTaskDelay(200 / portTICK_RATE_MS);
+    vTaskDelay(200 / portTICK_PERIOD_MS);
 
     ret = get_i2c_pins(I2C_NUM_0, &i2c_cfg);
     i2c_handler = i2c_bus_create(I2C_NUM_0, &i2c_cfg);
diff --git a/components/audio_hal/include/audio_hal.h b/components/audio_hal/include/audio_hal.h
index 1a9cf12a..065218c1 100755
--- a/components/audio_hal/include/audio_hal.h
+++ b/components/audio_hal/include/audio_hal.h
@@ -147,7 +147,7 @@ typedef struct audio_hal {
     esp_err_t (*audio_codec_set_volume)(int volume);                                                         /*!< set codec volume */
     esp_err_t (*audio_codec_get_volume)(int *volume);                                                        /*!< get codec volume */
     esp_err_t (*audio_codec_enable_pa) (bool enable);                                                        /*!< enable pa */
-    xSemaphoreHandle audio_hal_lock;                                                                         /*!< semaphore of codec */
+    SemaphoreHandle_t audio_hal_lock;                                                                         /*!< semaphore of codec */
     void *handle;                                                                                            /*!< handle of audio codec */
 } audio_hal_func_t;
 
diff --git a/components/audio_pipeline/audio_element.c b/components/audio_pipeline/audio_element.c
index 39b24468..bb26cdcc 100644
--- a/components/audio_pipeline/audio_element.c
+++ b/components/audio_pipeline/audio_element.c
@@ -37,7 +37,7 @@
 #include "audio_thread.h"
 
 static const char *TAG = "AUDIO_ELEMENT";
-#define DEFAULT_MAX_WAIT_TIME       (2000/portTICK_RATE_MS)
+#define DEFAULT_MAX_WAIT_TIME       (2000/portTICK_PERIOD_MS)
 
 /**
  *  I/O Element Abstract
@@ -106,7 +106,7 @@ struct audio_element {
     int                         task_stack;
     int                         task_prio;
     int                         task_core;
-    xSemaphoreHandle            lock;
+    SemaphoreHandle_t            lock;
     audio_element_info_t        info;
     audio_element_info_t        *report_info;
 
diff --git a/components/audio_pipeline/audio_pipeline.c b/components/audio_pipeline/audio_pipeline.c
index 8be8365c..3cd1001b 100644
--- a/components/audio_pipeline/audio_pipeline.c
+++ b/components/audio_pipeline/audio_pipeline.c
@@ -66,7 +66,7 @@ struct audio_pipeline {
     audio_element_list_t        el_list;
     ringbuf_list_t              rb_list;
     audio_element_state_t       state;
-    xSemaphoreHandle            lock;
+    SemaphoreHandle_t            lock;
     bool                        linked;
     audio_event_iface_handle_t  listener;
 };
@@ -315,10 +315,10 @@ esp_err_t audio_pipeline_resume(audio_pipeline_handle_t pipeline)
             continue;
         }
         if (wait_first_el) {
-            ret |= audio_element_resume(el_item->el, 0, 2000 / portTICK_RATE_MS);
+            ret |= audio_element_resume(el_item->el, 0, 2000 / portTICK_PERIOD_MS);
             wait_first_el = false;
         } else {
-            ret |= audio_element_resume(el_item->el, 0, 2000 / portTICK_RATE_MS);
+            ret |= audio_element_resume(el_item->el, 0, 2000 / portTICK_PERIOD_MS);
         }
     }
     audio_pipeline_change_state(pipeline, AEL_STATE_RUNNING);
diff --git a/components/audio_stream/pwm_stream.c b/components/audio_stream/pwm_stream.c
index c3326f94..5deaaab4 100644
--- a/components/audio_stream/pwm_stream.c
+++ b/components/audio_stream/pwm_stream.c
@@ -561,7 +561,7 @@ static void pwm_wait_flush(void)
     audio_pwm_handle_t handle = g_audio_pwm_handle;
     uint32_t data_size = pwm_data_list_get_count(handle->data);
     if (handle->status == AUDIO_PWM_STATUS_BUSY && data_size > 0) {
-        pwm_data_list_wait_flushed(handle->data, pwm_get_data_duration(data_size) / portTICK_RATE_MS);
+        pwm_data_list_wait_flushed(handle->data, pwm_get_data_duration(data_size) / portTICK_PERIOD_MS);
     }
 }
 
@@ -669,7 +669,7 @@ static esp_err_t _pwm_open(audio_element_handle_t self)
     if (pwm->is_open) {
         return ESP_OK;
     }
-    res = audio_element_set_input_timeout(self, 2000 / portTICK_RATE_MS);
+    res = audio_element_set_input_timeout(self, 2000 / portTICK_PERIOD_MS);
     pwm->is_open = true;
     return res;
 }
diff --git a/components/battery_service/battery_service.c b/components/battery_service/battery_service.c
index 222433ae..4a5b88cf 100644
--- a/components/battery_service/battery_service.c
+++ b/components/battery_service/battery_service.c
@@ -35,7 +35,7 @@
 #include "battery_service.h"
 
 typedef struct battery_service {
-    xQueueHandle serv_q;
+    QueueHandle_t serv_q;
     EventGroupHandle_t sync_events;
 
     vol_monitor_handle_t vol_monitor;
diff --git a/components/coredump_upload_service/coredump_upload_service.c b/components/coredump_upload_service/coredump_upload_service.c
index 16604bad..ac410cdf 100644
--- a/components/coredump_upload_service/coredump_upload_service.c
+++ b/components/coredump_upload_service/coredump_upload_service.c
@@ -49,7 +49,7 @@
 #endif
 
 typedef struct {
-    xQueueHandle cmd_q;
+    QueueHandle_t cmd_q;
     EventGroupHandle_t sync_evt;
     bool (*do_post)(char *url, uint8_t *data, size_t len);
 } coredump_upload_t;
diff --git a/components/dueros_service/dueros_service.c b/components/dueros_service/dueros_service.c
index 878d7648..147bb710 100644
--- a/components/dueros_service/dueros_service.c
+++ b/components/dueros_service/dueros_service.c
@@ -80,7 +80,7 @@ } duer_task_cmd_t;
 
 typedef struct {
     bool                    login;
-    xQueueHandle            duer_que;
+    QueueHandle_t            duer_que;
     service_state_t         duer_state;
     EventGroupHandle_t      duer_evt;
 } dueros_service_t;
diff --git a/components/esp_event_cast/esp_event_cast.c b/components/esp_event_cast/esp_event_cast.c
index 8cad8f4f..0c91fdff 100644
--- a/components/esp_event_cast/esp_event_cast.c
+++ b/components/esp_event_cast/esp_event_cast.c
@@ -37,7 +37,7 @@ static const char *TAG = "EVT_CAST";
 
 typedef struct esp_evt_cast_item {
     STAILQ_ENTRY(esp_evt_cast_item)     next;
-    xQueueHandle                        que;
+    QueueHandle_t                        que;
 } esp_evt_cast_item_t;
 
 typedef STAILQ_HEAD(esp_event_cast_list, esp_evt_cast_item) esp_event_cast_list_t;
@@ -75,7 +75,7 @@ esp_err_t esp_event_cast_destroy(esp_event_cast_handle_t handle)
     return ESP_FAIL;
 }
 
-esp_err_t esp_event_cast_register(esp_event_cast_handle_t handle, xQueueHandle que)
+esp_err_t esp_event_cast_register(esp_event_cast_handle_t handle, QueueHandle_t que)
 {
     if ((handle == NULL) || (que == NULL)) {
         ESP_LOGE(TAG, "func:%s, invalid parameters, handle=%p, que=%p", __func__, handle, que);
@@ -92,7 +92,7 @@ esp_err_t esp_event_cast_register(esp_event_cast_handle_t handle, xQueueHandle q
     return ESP_OK;
 }
 
-esp_err_t esp_event_cast_unregister(esp_event_cast_handle_t handle, xQueueHandle que)
+esp_err_t esp_event_cast_unregister(esp_event_cast_handle_t handle, QueueHandle_t que)
 {
     if ((handle == NULL) || (que == NULL)) {
         ESP_LOGE(TAG, "func:%s, invalid parameters, handle=%p, que=%p", __func__, handle, que);
diff --git a/components/esp_event_cast/include/esp_event_cast.h b/components/esp_event_cast/include/esp_event_cast.h
index aff08edf..6322872a 100644
--- a/components/esp_event_cast/include/esp_event_cast.h
+++ b/components/esp_event_cast/include/esp_event_cast.h
@@ -57,7 +57,7 @@ esp_err_t esp_event_cast_destroy(esp_event_cast_handle_t handle);
  *     - ESP_OK: success
  *     - ESP_FAIL: others
  */
-esp_err_t esp_event_cast_register(esp_event_cast_handle_t handle, xQueueHandle que);
+esp_err_t esp_event_cast_register(esp_event_cast_handle_t handle, QueueHandle_t que);
 
 /**
  * @brief Remove queue item from esp_event_cast_handle_t object, but does't delete the queue
@@ -69,7 +69,7 @@ esp_err_t esp_event_cast_register(esp_event_cast_handle_t handle, xQueueHandle q
  *     - ESP_OK: success
  *     - ESP_FAIL: others
  */
-esp_err_t esp_event_cast_unregister(esp_event_cast_handle_t handle, xQueueHandle que);
+esp_err_t esp_event_cast_unregister(esp_event_cast_handle_t handle, QueueHandle_t que);
 
 /**
  * @brief Broadcasting the data to receiver
diff --git a/components/esp_peripherals/include/esp_peripherals.h b/components/esp_peripherals/include/esp_peripherals.h
index ad4f9fe9..c6be4089 100644
--- a/components/esp_peripherals/include/esp_peripherals.h
+++ b/components/esp_peripherals/include/esp_peripherals.h
@@ -29,6 +29,7 @@
 #include "audio_event_iface.h"
 #include "audio_common.h"
 #include "freertos/event_groups.h"
+#include "freertos/timers.h"
 
 #ifdef __cplusplus
 extern "C" {
@@ -76,7 +77,7 @@ typedef struct esp_periph *esp_periph_handle_t;
 typedef esp_err_t (*esp_periph_func)(esp_periph_handle_t periph);
 typedef esp_err_t (*esp_periph_run_func)(esp_periph_handle_t periph, audio_event_iface_msg_t *msg);
 typedef esp_err_t (*esp_periph_event_handle_t)(audio_event_iface_msg_t *event, void *context);
-typedef void (*timer_callback)(xTimerHandle tmr);
+typedef void (*timer_callback)(TimerHandle_t tmr);
 
 /**
  * @brief Common peripherals configurations
